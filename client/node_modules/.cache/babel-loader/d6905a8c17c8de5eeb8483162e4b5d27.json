{"ast":null,"code":"var _jsxFileName = \"/Users/thomasruff/Development/projects/DadLife/client/src/components/userComponents/CreatePostModal/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { postPosts } from \"../../../core/jokeSearch\";\nimport \"./style.css\";\nimport closeIcon from \"../../../assets/images/newicons/closeIcon.svg\"; // getting redux store\n\nimport { useDispatch } from \"react-redux\";\nimport { closeModal } from \"../../../actions\";\nexport default function CreatePostModal({\n  userPostsId,\n  token\n}) {\n  // make sure to import dispatch so that you can use the actions.\n  const dispatch = useDispatch();\n  const [values, setValues] = useState({\n    postText: \"\",\n    userId: userPostsId,\n    formData: \"\",\n    loading: false,\n    error: \"\"\n  });\n  const [image, setImage] = useState(\"\");\n  const {\n    postText,\n    user,\n    userId,\n    formData,\n    loading,\n    error\n  } = values;\n  useEffect(() => {\n    setValues({ ...values,\n      formData: new FormData()\n    });\n  }, []);\n\n  const handleChange = name => event => {\n    var value = event.target.value;\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  const handleImage = e => {\n    setImage(e.target.value[0]);\n    formData.set(\"image\", image);\n  };\n\n  const formSubmit = e => {\n    e.preventDefault();\n    console.log(postText, userId);\n    let postData = {\n      image: formData,\n      postText: postText\n    };\n    postPosts(postData, userPostsId, token);\n  };\n\n  const formComp = () => {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: e => formSubmit(e),\n      className: \"cp-f-cont\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      name: \"image\",\n      onChange: e => handleImage(e),\n      accept: \"image/*\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"textarea\", {\n      typeof: \"text\",\n      onChange: handleChange(\"postText\"),\n      maxLength: \"150\",\n      value: postText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      typeof: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, \"Post\"));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cp-modal-overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    onClick: () => dispatch(closeModal(false)),\n    className: \"cp-modal-close\",\n    src: closeIcon,\n    alt: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), formComp());\n}","map":{"version":3,"sources":["/Users/thomasruff/Development/projects/DadLife/client/src/components/userComponents/CreatePostModal/index.js"],"names":["React","useState","useEffect","postPosts","useDispatch","closeModal","CreatePostModal","userPostsId","token","dispatch","values","setValues","postText","userId","formData","loading","error","image","setImage","user","FormData","handleChange","name","event","value","target","handleImage","e","set","formSubmit","preventDefault","console","log","postData","formComp","closeIcon"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { postPosts } from \"../../../core/jokeSearch\";\nimport \"./style.css\";\nimport closeIcon from \"../../../assets/images/newicons/closeIcon.svg\";\n// getting redux store\nimport { useDispatch } from \"react-redux\";\nimport { closeModal } from \"../../../actions\";\n\nexport default function CreatePostModal({ userPostsId, token }) {\n  // make sure to import dispatch so that you can use the actions.\n  const dispatch = useDispatch();\n\n  const [values, setValues] = useState({\n    postText: \"\",\n    userId: userPostsId,\n    formData: \"\",\n    loading: false,\n    error: \"\",\n  });\n  const [image, setImage] = useState(\"\");\n\n  const { postText, user, userId, formData, loading, error } = values;\n\n  useEffect(() => {\n    setValues({ ...values, formData: new FormData() });\n  }, []);\n\n  const handleChange = (name) => (event) => {\n    var value = event.target.value;\n    setValues({ ...values, [name]: value });\n  };\n  const handleImage = (e) => {\n    setImage(e.target.value[0])\n    formData.set(\"image\", image);\n  };\n\n  const formSubmit = (e) => {\n    e.preventDefault();\n    console.log(postText, userId);\n    let postData = {\n      image: formData,\n      postText: postText,\n    };\n    postPosts(postData, userPostsId, token);\n  };\n\n  const formComp = () => {\n    return (\n      <form onSubmit={(e) => formSubmit(e)} className=\"cp-f-cont\">\n        <input\n          type=\"file\"\n          name=\"image\"\n          onChange={(e) => handleImage(e)}\n          accept=\"image/*\"\n        />\n        <textarea\n          typeof=\"text\"\n          onChange={handleChange(\"postText\")}\n          maxLength=\"150\"\n          value={postText}\n        ></textarea>\n        <button typeof=\"submit\">Post</button>\n      </form>\n    );\n  };\n\n  return (\n    <div className=\"cp-modal-overlay\">\n      <img\n        onClick={() => dispatch(closeModal(false))}\n        className=\"cp-modal-close\"\n        src={closeIcon}\n        alt=\"#\"\n      />\n      {formComp()}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}